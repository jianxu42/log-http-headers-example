
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time" '
                      'resp_header:"$resp_header" resp_body:"$resp_body" req_header_bytes:"$req_header_bytes"';

    log_format  with_req_header  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time" '
                            'req_header:"$req_header" req_header_bytes:"$req_header_bytes"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    server {
        listen       80;
        server_name  localhost;
        
        large_client_header_buffers 4 8k;

        #charset koi8-r;

        access_log  logs/host.access.log  with_req_header ;

        lua_need_request_body on;

        set $resp_header "";
        header_filter_by_lua '
            local h = ngx.resp.get_headers()
            for k, v in pairs(h) do
                ngx.var.resp_header=ngx.var.resp_header..k..": "..v
            end
        ';

        set $resp_body "";
        body_filter_by_lua '
            local resp_body = string.sub(ngx.arg[1], 1, 1000)
            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
            if ngx.arg[2] then
                ngx.var.resp_body = ngx.ctx.buffered
            end
        ';
        
        set $req_header "";
        set $req_header_bytes "";
        rewrite_by_lua '
            ngx.req.clear_header("X-ARR-ClientCert")
            local h, err = ngx.req.get_headers()
            if err == "truncated" then
             -- one can choose to ignore or reject the current request here
            end
            for k, v in pairs(h) do
                ngx.var.req_header=ngx.var.req_header..k..": "..v
            end
            ngx.var.req_header_bytes=ngx.var.req_header:len()
        ';
       
        
        location /echo/get/json {
            proxy_pass https://reqbin.com;
            
            proxy_ssl_session_reuse off;

            # Proxy headers
            #proxy_set_header Upgrade           $http_upgrade;
            #proxy_set_header Connection        "upgrade";
            proxy_set_header Host               "reqbin.com";
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Forwarded-Port   $server_port;
            #proxy_hide_header X-ARR-ClientCert;
            #proxy_set_header X-ARR-ClientCert  "";

            # Proxy timeouts
            proxy_connect_timeout              60s;
            proxy_send_timeout                 60s;
            proxy_read_timeout                 60s;
        }

        
        location /hello {
            proxy_pass https://enak80j25b8w.x.pipedream.net;
            
            proxy_ssl_session_reuse off;

            # Proxy headers
            #proxy_set_header Upgrade           $http_upgrade;
            #proxy_set_header Connection        "upgrade";
            proxy_set_header Host               "enak80j25b8w.x.pipedream.net";
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Forwarded-Port   $server_port;
            #proxy_hide_header X-ARR-ClientCert;
            #proxy_set_header X-ARR-ClientCert  "";

            # Proxy timeouts
            proxy_connect_timeout              60s;
            proxy_send_timeout                 60s;
            proxy_read_timeout                 60s;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}